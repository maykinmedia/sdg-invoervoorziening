# Generated by Django 3.2.16 on 2023-02-03 11:43

from django.db import migrations
from django.db.models import F, Func, Value, Count, CharField


import logging


logger = logging.getLogger(__name__)


def delete_invalid_product_versions(apps, schema_editor):
    ProductVersie = apps.get_model("producten", "ProductVersie")
    Product = apps.get_model("producten", "Product")

    problems = list(
        ProductVersie.objects.annotate(
            key=Func(
                F("product_id"),
                Value("-"),
                F("versie"),
                function="concat",
                output_field=CharField(),
            )
        )
        .values("key")
        .annotate(hits=Count("key"))
        .filter(hits__gt=1)
    )
    for problem in problems:
        product_id, version_nr = map(int, problem["key"].split("-"))
        hits = int(problem["hits"])

        # Oldest first
        product_versions = list(
            Product.objects.get(pk=product_id)
            .versies.filter(versie=version_nr)
            .order_by("pk")
        )
        for index, pv in enumerate(product_versions):
            nr = index + 1
            if nr < hits:
                if pv.publicatie_datum:
                    pv_state = "concept"
                else:
                    pv_state = "published"
                logger.warning(
                    f"Deleting ({pv_state}) product '{pv.product.generiek_product.upn.upn_label}' version {version_nr} in '{pv.product.catalogus.naam}' ({nr}/{hits})."
                )
                pv.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("producten", "0049_alter_localizedproduct_product_titel_decentraal"),
    ]

    operations = [
        migrations.RunPython(
            delete_invalid_product_versions, migrations.RunPython.noop
        ),
    ]
